1: Number of frames = 4000
---- RESULTS ----
Elapsed execution time: 107.164359s
1262 Line-Wall Collisions
19806 Line-Line Collisions
---- END RESULTS ----

2. This is not a problem for the quad tree. This line will exist at the top level of the quad tree, and can be passed into each of the leaves when detecting collisions in those leaves. This will still effectively speed up the collision detection.

3. Number of frames = 4000
---- RESULTS ----
Elapsed execution time: 25.596644s
1262 Line-Wall Collisions
19806 Line-Line Collisions
---- END RESULTS ----

4. We got a >4x speed-up, which is larger than we expected.

5. We built a quadtree which only stores lines in its leaves. We also considered the lines 
as parallelograms when placing them into quadtree nodes. To detect the collisions, we 
recursively called our detect collisions function on each of the
four quadrants in the quadtree, until we hit leaves. Then we iterated through all of the leaves
in that leaf using the same O(N^2) collision test.

To accomodate for lines which spanned multiple nodes after a quadtree was divided, we placed that
line in each of the nodes in which it intersected. To avoid repeated collisions being marked,
we checked to make sure the intersection was not part of the event list before adding the 
intersection.

6. We tested N = 80, 100, 120, 140, and 160, and found that N=140 gave us the best performance 
for 4000 frames. We concluded this was due the to overhead of recursing too deeply to divide the
collisions up, which was not worth the small decrease in the O(N^2) base case.

7. Our first optimization was to try rewriting a method for calculating when two lines intersect. We attempted to implement an algorithm that would check if each endpoint of one line was on either side of the other line. However, when addressing edge cases such as when one line's endpoint was on the other line, we ran into errors with floating point number rounding. On these edgecases, the best alternative was to resort to the original intersection detection algorithm, and the overall result was a slower runtime. As a result, we did not continue to use this updated line intersection detection function.

We also tried precomputing the length of each line. This did not result in a significant speedup.

We then made the Quadtree a parameter of the CollisionWorld. This allowed us to update the 
Quadtree at each timestep rather than recreating it, and this led to a 5% speedup.

We also added a preliminary check to our function that checks if we need to include a line in the quadtree.
This check sees if all of the points of the parallelogram form by the line are off to any side of the box
to quickly exclude it. This reduces the number of times we need to calculate pointInParallelogram and
intersectLines, and led to a 30% speedup.

Next, we tried inlining all of the functions. We found that inlining the non recursive IntersectionDetection, Quadtree, and Vec file functions led to a speedup, but not inlining the CollisionWorld and EventList functions.

We decreased the number of function calls in our check of whether or not a parallelogram that represents a moving line intersects a box represented by a leaf in the quadtree. We only have 16 function calls--eight to determine whether one corner of one shape lies within another shap, and eight to determine whether the lines of the quadtree square intersects any part of the parallelogram that represents the moving line.

Also, we created a new method that returns whether or not an intersection exists before checking what type of intersection exists. We called this method fastIntersect, and it resulted in several seconds speedup.

Finally, we reordered function calls in the intersect method and rewrote part of the method to allow for more efficient checking of the intersect type. 

8.
  %   cumulative   self              self     total
 time   seconds   seconds    calls  ms/call  ms/call  name
 25.00      0.80     0.80 46415185     0.00     0.00  fastIntersect
 21.57      1.49     0.69 143021580     0.00     0.00  Vec_multiply
 20.32      2.14     0.65 143020897     0.00     0.00  Vec_add
 10.63      2.48     0.34     1001     0.34     2.18  detectCollisions
  6.88      2.70     0.22    13565     0.02     0.03  shouldDivideTree
  5.31      2.87     0.17 46418439     0.00     0.00  Vec_subtract

9. We made a reducer for the intersectionEventList and also used an OpAdd reducer to track the number of collisions. We then parallelized the methods used to count collisions; using a reducer allowed us to avoid race conditions. We were also able to remove a large amount of the logic inside our line collision counting method, detectCollisionsReducer, which sped up our code significantly but double counted collisions. To account for these duplicate events being added to the reducer, we modified the event list sort to remove any duplicates it finds while sorting, also using a reducer. 
We also parallelized our aggregation of the counts reported from the four children of any quadtree node. Using cilk_spawn, we counted the number of line intersections in each quadtree node child with a different thread, and then aggregated those counts after syncing up these threads.
Apart from these main parallelizations, we also parallelized the quadtree delete method, as well as various methods in CollisionWorld. Most of these parallelizations did not result in significant speedup, with the exception of the quadtree delete method.

jlmart88@desflurane:~/project2$ cilkscreen ./Screensaver 100
Cilkscreen Race Detector V2.0.0, Build 3566
Number of frames = 100
---- RESULTS ----
Elapsed execution time: 20.491324s
0 Line-Wall Collisions
0 Line-Line Collisions
---- END RESULTS ----
No errors found by Cilkscreen

10. I see a parallelism of 4.15 across the whole program, and a parallelism of 118.14 across the parallel regions. This is the maximum amount of parallelism that we have achieved so far. You can see the results of cilkview as follows:

Whole Program Statistics
1) Parallelism Profile
   Work :					 4,953,127,778 instructions
   Span :					 1,192,268,773 instructions
   Burdened span :				 1,448,094,416 instructions
   Parallelism :				 4.15
   Burdened parallelism :			 3.42
   Number of spawns/syncs:			 5,135,057
   Average instructions / strand :		 321
   Strands along span :				 22,941
   Average instructions / strand on span :	 51,971
   Total number of atomic instructions : 	 5,141,191
   Frame count :				 10,405,083

2) Speedup Estimate
     2 processors:	 1.34 - 2.00
     4 processors:	 1.61 - 4.00
     8 processors:	 1.79 - 4.15
    16 processors:	 1.89 - 4.15
    32 processors:	 1.95 - 4.15
    64 processors:	 1.98 - 4.15
   128 processors:	 2.00 - 4.15
   256 processors:	 2.00 - 4.15

Cilk Parallel Region(s) Statistics - Elapsed time: 0.047 seconds
1) Parallelism Profile
   Work :					 3,792,965,931 instructions
   Span :					 32,106,926 instructions
   Burdened span :				 287,932,569 instructions
   Parallelism :				 118.14
   Burdened parallelism :			 13.17
   Number of spawns/syncs:			 5,135,057
   Average instructions / strand :		 246
   Strands along span :				 11,470
   Average instructions / strand on span :	 2,799
   Total number of atomic instructions : 	 5,141,191
   Frame count :				 10,405,083
   Entries to parallel region :			 1,113

2) Speedup Estimate
     2 processors:	 1.77 - 2.00
     4 processors:	 2.88 - 4.00
     8 processors:	 4.20 - 8.00
    16 processors:	 5.45 - 16.00
    32 processors:	 6.40 - 32.00
    64 processors:	 7.01 - 64.00
   128 processors:	 7.36 - 118.14
   256 processors:	 7.55 - 118.14

11. We fine-tuned N to be 155--we found that this was the optimal N for the 12 processors. Additionally, we found that by decreasing the number of inlined methods, we actually obtained a significant speedup. In the end, our results were as follows:

Number of frames = 4000
---- RESULTS ----
Elapsed execution time: 2.334781s
1262 Line-Wall Collisions
19806 Line-Line Collisions
---- END RESULTS ----
